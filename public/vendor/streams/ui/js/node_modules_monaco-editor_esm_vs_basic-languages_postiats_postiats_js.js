"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkstreams_ui"] = self["webpackChunkstreams_ui"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_postiats_postiats_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js":
/*!********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.35.0(71ac097e6155a405f6be52b0b368a04508c31e31)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\n    \"abstype\",\n    \"abst0ype\",\n    \"absprop\",\n    \"absview\",\n    \"absvtype\",\n    \"absviewtype\",\n    \"absvt0ype\",\n    \"absviewt0ype\",\n    \"as\",\n    \"and\",\n    \"assume\",\n    \"begin\",\n    \"classdec\",\n    \"datasort\",\n    \"datatype\",\n    \"dataprop\",\n    \"dataview\",\n    \"datavtype\",\n    \"dataviewtype\",\n    \"do\",\n    \"end\",\n    \"extern\",\n    \"extype\",\n    \"extvar\",\n    \"exception\",\n    \"fn\",\n    \"fnx\",\n    \"fun\",\n    \"prfn\",\n    \"prfun\",\n    \"praxi\",\n    \"castfn\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"ifcase\",\n    \"in\",\n    \"infix\",\n    \"infixl\",\n    \"infixr\",\n    \"prefix\",\n    \"postfix\",\n    \"implmnt\",\n    \"implement\",\n    \"primplmnt\",\n    \"primplement\",\n    \"import\",\n    \"let\",\n    \"local\",\n    \"macdef\",\n    \"macrodef\",\n    \"nonfix\",\n    \"symelim\",\n    \"symintr\",\n    \"overload\",\n    \"of\",\n    \"op\",\n    \"rec\",\n    \"sif\",\n    \"scase\",\n    \"sortdef\",\n    \"sta\",\n    \"stacst\",\n    \"stadef\",\n    \"static\",\n    \"staload\",\n    \"dynload\",\n    \"try\",\n    \"tkindef\",\n    \"typedef\",\n    \"propdef\",\n    \"viewdef\",\n    \"vtypedef\",\n    \"viewtypedef\",\n    \"prval\",\n    \"var\",\n    \"prvar\",\n    \"when\",\n    \"where\",\n    \"with\",\n    \"withtype\",\n    \"withprop\",\n    \"withview\",\n    \"withvtype\",\n    \"withviewtype\"\n  ],\n  keywords_dlr: [\n    \"$delay\",\n    \"$ldelay\",\n    \"$arrpsz\",\n    \"$arrptrsize\",\n    \"$d2ctype\",\n    \"$effmask\",\n    \"$effmask_ntm\",\n    \"$effmask_exn\",\n    \"$effmask_ref\",\n    \"$effmask_wrt\",\n    \"$effmask_all\",\n    \"$extern\",\n    \"$extkind\",\n    \"$extype\",\n    \"$extype_struct\",\n    \"$extval\",\n    \"$extfcall\",\n    \"$extmcall\",\n    \"$literal\",\n    \"$myfilename\",\n    \"$mylocation\",\n    \"$myfunction\",\n    \"$lst\",\n    \"$lst_t\",\n    \"$lst_vt\",\n    \"$list\",\n    \"$list_t\",\n    \"$list_vt\",\n    \"$rec\",\n    \"$rec_t\",\n    \"$rec_vt\",\n    \"$record\",\n    \"$record_t\",\n    \"$record_vt\",\n    \"$tup\",\n    \"$tup_t\",\n    \"$tup_vt\",\n    \"$tuple\",\n    \"$tuple_t\",\n    \"$tuple_vt\",\n    \"$break\",\n    \"$continue\",\n    \"$raise\",\n    \"$showtype\",\n    \"$vcopyenv_v\",\n    \"$vcopyenv_vt\",\n    \"$tempenver\",\n    \"$solver_assert\",\n    \"$solver_verify\"\n  ],\n  keywords_srp: [\n    \"#if\",\n    \"#ifdef\",\n    \"#ifndef\",\n    \"#then\",\n    \"#elif\",\n    \"#elifdef\",\n    \"#elifndef\",\n    \"#else\",\n    \"#endif\",\n    \"#error\",\n    \"#prerr\",\n    \"#print\",\n    \"#assert\",\n    \"#undef\",\n    \"#define\",\n    \"#include\",\n    \"#require\",\n    \"#pragma\",\n    \"#codegen2\",\n    \"#codegen3\"\n  ],\n  irregular_keyword_list: [\n    \"val+\",\n    \"val-\",\n    \"val\",\n    \"case+\",\n    \"case-\",\n    \"case\",\n    \"addr@\",\n    \"addr\",\n    \"fold@\",\n    \"free@\",\n    \"fix@\",\n    \"fix\",\n    \"lam@\",\n    \"lam\",\n    \"llam@\",\n    \"llam\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"view+\",\n    \"view-\",\n    \"view@\",\n    \"view\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"vtype+\",\n    \"vtype-\",\n    \"vtype\",\n    \"vt@ype+\",\n    \"vt@ype-\",\n    \"vt@ype\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"prop+\",\n    \"prop-\",\n    \"prop\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"t@ype\",\n    \"t@ype+\",\n    \"t@ype-\",\n    \"abst@ype\",\n    \"abstype\",\n    \"absviewt@ype\",\n    \"absvt@ype\",\n    \"for*\",\n    \"for\",\n    \"while*\",\n    \"while\"\n  ],\n  keywords_types: [\n    \"bool\",\n    \"double\",\n    \"byte\",\n    \"int\",\n    \"short\",\n    \"char\",\n    \"void\",\n    \"unit\",\n    \"long\",\n    \"float\",\n    \"string\",\n    \"strptr\"\n  ],\n  keywords_effects: [\n    \"0\",\n    \"fun\",\n    \"clo\",\n    \"prf\",\n    \"funclo\",\n    \"cloptr\",\n    \"cloref\",\n    \"ref\",\n    \"ntm\",\n    \"1\"\n  ],\n  operators: [\n    \"@\",\n    \"!\",\n    \"|\",\n    \"`\",\n    \":\",\n    \"$\",\n    \".\",\n    \"=\",\n    \"#\",\n    \"~\",\n    \"..\",\n    \"...\",\n    \"=>\",\n    \"=<>\",\n    \"=/=>\",\n    \"=>>\",\n    \"=/=>>\",\n    \"<\",\n    \">\",\n    \"><\",\n    \".<\",\n    \">.\",\n    \".<>.\",\n    \"->\",\n    \"-<>\"\n  ],\n  brackets: [\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\n      {\n        regex: /\\(\\*/,\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\n      },\n      {\n        regex: /\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\)/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\]/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\}/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /,\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\n      {\n        regex: /@\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /:</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\n      {\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\n      {\n        regex: /\\$@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\n            \"@default\": { token: \"namespace\" }\n          }\n        }\n      },\n      {\n        regex: /\\#@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_srp\": { token: \"keyword.srp\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\n      {\n        regex: /^%{(#|\\^|\\$)?/,\n        action: {\n          token: \"keyword\",\n          next: \"@lexing_EXTCODE\",\n          nextEmbedded: \"text/javascript\"\n        }\n      },\n      { regex: /^%}/, action: { token: \"keyword\" } },\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'[^\\\\']'/, \"string\"],\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n      {\n        regex: /`\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\n      {\n        regex: /@irregular_keywords(?!@IDENTRST)/,\n        action: { token: \"keyword\" }\n      },\n      {\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@keywords_types\": { token: \"type\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      {\n        regex: /\\/\\/\\/\\//,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\n      },\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\n      {\n        regex: /\\/\\*/,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\n      },\n      {\n        regex: /-<|=</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      {\n        regex: /@symbolic+/,\n        action: {\n          cases: {\n            \"@operators\": \"keyword\",\n            \"@default\": \"operator\"\n          }\n        }\n      },\n      {\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\n      {\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\n        action: { token: \"number.octal\" }\n      },\n      {\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      {\n        regex: /@digit@digitseq0@INTSP*/,\n        action: { token: \"number.decimal\" }\n      },\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\n    ],\n    lexing_COMMENT_block_ml: [\n      [/[^\\(\\*]+/, \"comment\"],\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\(\\*/, \"comment.invalid\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"]\n    ],\n    lexing_COMMENT_block_c: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    lexing_COMMENT_rest: [\n      [/$/, \"comment\", \"@pop\"],\n      [/.*/, \"comment\"]\n    ],\n    lexing_EFFECT_commaseq0: [\n      {\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\n        action: {\n          cases: {\n            \"@keywords_effects\": { token: \"type.effect\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /,/, action: { token: \"punctuation\" } },\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\n    ],\n    lexing_EXTCODE: [\n      {\n        regex: /^%}/,\n        action: {\n          token: \"@rematch\",\n          next: \"@pop\",\n          nextEmbedded: \"@pop\"\n        }\n      },\n      { regex: /[^%]+/, action: \"\" }\n    ],\n    lexing_DQUOTE: [\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\n      {\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\n      },\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\n      {\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n        action: { token: \"string.escape\" }\n      },\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\n    ]\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL3Bvc3RpYXRzL3Bvc3RpYXRzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEtBQUs7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxREFBcUQ7QUFDM0QsTUFBTSxRQUFRLFlBQVksaUNBQWlDO0FBQzNELE1BQU0scURBQXFEO0FBQzNELE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHdEQUF3RDtBQUM5RCxNQUFNLHdEQUF3RDtBQUM5RCxNQUFNLHdEQUF3RDtBQUM5RCxNQUFNLHdEQUF3RDtBQUM5RCxNQUFNLFNBQVMsWUFBWSxtQ0FBbUM7QUFDOUQs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QUNBO0FBQ0EsT0FBTztBQUNQLFFBQVEsc0JBQXNCLHdCQUF3QjtBQUN0RCxRQUFRLHNCQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVEsc0JBQXNCLHVDQUF1QztBQUNyRTtBQUNBLG1CQUFtQiwyQkFBMkI7QUFDOUMsbUJBQW1CLHdCQUF3QixJQUFJLHFCQUFxQixJQUFJLHdCQUF3QjtBQUNoRyxPQUFPO0FBQ1AsUUFBUSx3QkFBd0IsMEJBQTBCO0FBQzFEO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsT0FBTztBQUNQLFFBQVEsNEJBQTRCO0FBQ3BDO0FBQ0E7QUFDQTtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyZWFtcy51aS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNpYy1sYW5ndWFnZXMvcG9zdGlhdHMvcG9zdGlhdHMuanM/MmQ0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBWZXJzaW9uOiAwLjM1LjAoNzFhYzA5N2U2MTU1YTQwNWY2YmU1MmIwYjM2OGEwNDUwOGMzMWUzMSlcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9tb25hY28tZWRpdG9yL2Jsb2IvbWFpbi9MSUNFTlNFLnR4dFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8vIHNyYy9iYXNpYy1sYW5ndWFnZXMvcG9zdGlhdHMvcG9zdGlhdHMudHNcbnZhciBjb25mID0ge1xuICBjb21tZW50czoge1xuICAgIGxpbmVDb21tZW50OiBcIi8vXCIsXG4gICAgYmxvY2tDb21tZW50OiBbXCIoKlwiLCBcIiopXCJdXG4gIH0sXG4gIGJyYWNrZXRzOiBbXG4gICAgW1wie1wiLCBcIn1cIl0sXG4gICAgW1wiW1wiLCBcIl1cIl0sXG4gICAgW1wiKFwiLCBcIilcIl0sXG4gICAgW1wiPFwiLCBcIj5cIl1cbiAgXSxcbiAgYXV0b0Nsb3NpbmdQYWlyczogW1xuICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicsIG5vdEluOiBbXCJzdHJpbmdcIiwgXCJjb21tZW50XCJdIH0sXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiLCBub3RJbjogW1wic3RyaW5nXCIsIFwiY29tbWVudFwiXSB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiwgbm90SW46IFtcInN0cmluZ1wiLCBcImNvbW1lbnRcIl0gfSxcbiAgICB7IG9wZW46IFwiKFwiLCBjbG9zZTogXCIpXCIsIG5vdEluOiBbXCJzdHJpbmdcIiwgXCJjb21tZW50XCJdIH1cbiAgXVxufTtcbnZhciBsYW5ndWFnZSA9IHtcbiAgdG9rZW5Qb3N0Zml4OiBcIi5wYXRzXCIsXG4gIGRlZmF1bHRUb2tlbjogXCJpbnZhbGlkXCIsXG4gIGtleXdvcmRzOiBbXG4gICAgXCJhYnN0eXBlXCIsXG4gICAgXCJhYnN0MHlwZVwiLFxuICAgIFwiYWJzcHJvcFwiLFxuICAgIFwiYWJzdmlld1wiLFxuICAgIFwiYWJzdnR5cGVcIixcbiAgICBcImFic3ZpZXd0eXBlXCIsXG4gICAgXCJhYnN2dDB5cGVcIixcbiAgICBcImFic3ZpZXd0MHlwZVwiLFxuICAgIFwiYXNcIixcbiAgICBcImFuZFwiLFxuICAgIFwiYXNzdW1lXCIsXG4gICAgXCJiZWdpblwiLFxuICAgIFwiY2xhc3NkZWNcIixcbiAgICBcImRhdGFzb3J0XCIsXG4gICAgXCJkYXRhdHlwZVwiLFxuICAgIFwiZGF0YXByb3BcIixcbiAgICBcImRhdGF2aWV3XCIsXG4gICAgXCJkYXRhdnR5cGVcIixcbiAgICBcImRhdGF2aWV3dHlwZVwiLFxuICAgIFwiZG9cIixcbiAgICBcImVuZFwiLFxuICAgIFwiZXh0ZXJuXCIsXG4gICAgXCJleHR5cGVcIixcbiAgICBcImV4dHZhclwiLFxuICAgIFwiZXhjZXB0aW9uXCIsXG4gICAgXCJmblwiLFxuICAgIFwiZm54XCIsXG4gICAgXCJmdW5cIixcbiAgICBcInByZm5cIixcbiAgICBcInByZnVuXCIsXG4gICAgXCJwcmF4aVwiLFxuICAgIFwiY2FzdGZuXCIsXG4gICAgXCJpZlwiLFxuICAgIFwidGhlblwiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiaWZjYXNlXCIsXG4gICAgXCJpblwiLFxuICAgIFwiaW5maXhcIixcbiAgICBcImluZml4bFwiLFxuICAgIFwiaW5maXhyXCIsXG4gICAgXCJwcmVmaXhcIixcbiAgICBcInBvc3RmaXhcIixcbiAgICBcImltcGxtbnRcIixcbiAgICBcImltcGxlbWVudFwiLFxuICAgIFwicHJpbXBsbW50XCIsXG4gICAgXCJwcmltcGxlbWVudFwiLFxuICAgIFwiaW1wb3J0XCIsXG4gICAgXCJsZXRcIixcbiAgICBcImxvY2FsXCIsXG4gICAgXCJtYWNkZWZcIixcbiAgICBcIm1hY3JvZGVmXCIsXG4gICAgXCJub25maXhcIixcbiAgICBcInN5bWVsaW1cIixcbiAgICBcInN5bWludHJcIixcbiAgICBcIm92ZXJsb2FkXCIsXG4gICAgXCJvZlwiLFxuICAgIFwib3BcIixcbiAgICBcInJlY1wiLFxuICAgIFwic2lmXCIsXG4gICAgXCJzY2FzZVwiLFxuICAgIFwic29ydGRlZlwiLFxuICAgIFwic3RhXCIsXG4gICAgXCJzdGFjc3RcIixcbiAgICBcInN0YWRlZlwiLFxuICAgIFwic3RhdGljXCIsXG4gICAgXCJzdGFsb2FkXCIsXG4gICAgXCJkeW5sb2FkXCIsXG4gICAgXCJ0cnlcIixcbiAgICBcInRraW5kZWZcIixcbiAgICBcInR5cGVkZWZcIixcbiAgICBcInByb3BkZWZcIixcbiAgICBcInZpZXdkZWZcIixcbiAgICBcInZ0eXBlZGVmXCIsXG4gICAgXCJ2aWV3dHlwZWRlZlwiLFxuICAgIFwicHJ2YWxcIixcbiAgICBcInZhclwiLFxuICAgIFwicHJ2YXJcIixcbiAgICBcIndoZW5cIixcbiAgICBcIndoZXJlXCIsXG4gICAgXCJ3aXRoXCIsXG4gICAgXCJ3aXRodHlwZVwiLFxuICAgIFwid2l0aHByb3BcIixcbiAgICBcIndpdGh2aWV3XCIsXG4gICAgXCJ3aXRodnR5cGVcIixcbiAgICBcIndpdGh2aWV3dHlwZVwiXG4gIF0sXG4gIGtleXdvcmRzX2RscjogW1xuICAgIFwiJGRlbGF5XCIsXG4gICAgXCIkbGRlbGF5XCIsXG4gICAgXCIkYXJycHN6XCIsXG4gICAgXCIkYXJycHRyc2l6ZVwiLFxuICAgIFwiJGQyY3R5cGVcIixcbiAgICBcIiRlZmZtYXNrXCIsXG4gICAgXCIkZWZmbWFza19udG1cIixcbiAgICBcIiRlZmZtYXNrX2V4blwiLFxuICAgIFwiJGVmZm1hc2tfcmVmXCIsXG4gICAgXCIkZWZmbWFza193cnRcIixcbiAgICBcIiRlZmZtYXNrX2FsbFwiLFxuICAgIFwiJGV4dGVyblwiLFxuICAgIFwiJGV4dGtpbmRcIixcbiAgICBcIiRleHR5cGVcIixcbiAgICBcIiRleHR5cGVfc3RydWN0XCIsXG4gICAgXCIkZXh0dmFsXCIsXG4gICAgXCIkZXh0ZmNhbGxcIixcbiAgICBcIiRleHRtY2FsbFwiLFxuICAgIFwiJGxpdGVyYWxcIixcbiAgICBcIiRteWZpbGVuYW1lXCIsXG4gICAgXCIkbXlsb2NhdGlvblwiLFxuICAgIFwiJG15ZnVuY3Rpb25cIixcbiAgICBcIiRsc3RcIixcbiAgICBcIiRsc3RfdFwiLFxuICAgIFwiJGxzdF92dFwiLFxuICAgIFwiJGxpc3RcIixcbiAgICBcIiRsaXN0X3RcIixcbiAgICBcIiRsaXN0X3Z0XCIsXG4gICAgXCIkcmVjXCIsXG4gICAgXCIkcmVjX3RcIixcbiAgICBcIiRyZWNfdnRcIixcbiAgICBcIiRyZWNvcmRcIixcbiAgICBcIiRyZWNvcmRfdFwiLFxuICAgIFwiJHJlY29yZF92dFwiLFxuICAgIFwiJHR1cFwiLFxuICAgIFwiJHR1cF90XCIsXG4gICAgXCIkdHVwX3Z0XCIsXG4gICAgXCIkdHVwbGVcIixcbiAgICBcIiR0dXBsZV90XCIsXG4gICAgXCIkdHVwbGVfdnRcIixcbiAgICBcIiRicmVha1wiLFxuICAgIFwiJGNvbnRpbnVlXCIsXG4gICAgXCIkcmFpc2VcIixcbiAgICBcIiRzaG93dHlwZVwiLFxuICAgIFwiJHZjb3B5ZW52X3ZcIixcbiAgICBcIiR2Y29weWVudl92dFwiLFxuICAgIFwiJHRlbXBlbnZlclwiLFxuICAgIFwiJHNvbHZlcl9hc3NlcnRcIixcbiAgICBcIiRzb2x2ZXJfdmVyaWZ5XCJcbiAgXSxcbiAga2V5d29yZHNfc3JwOiBbXG4gICAgXCIjaWZcIixcbiAgICBcIiNpZmRlZlwiLFxuICAgIFwiI2lmbmRlZlwiLFxuICAgIFwiI3RoZW5cIixcbiAgICBcIiNlbGlmXCIsXG4gICAgXCIjZWxpZmRlZlwiLFxuICAgIFwiI2VsaWZuZGVmXCIsXG4gICAgXCIjZWxzZVwiLFxuICAgIFwiI2VuZGlmXCIsXG4gICAgXCIjZXJyb3JcIixcbiAgICBcIiNwcmVyclwiLFxuICAgIFwiI3ByaW50XCIsXG4gICAgXCIjYXNzZXJ0XCIsXG4gICAgXCIjdW5kZWZcIixcbiAgICBcIiNkZWZpbmVcIixcbiAgICBcIiNpbmNsdWRlXCIsXG4gICAgXCIjcmVxdWlyZVwiLFxuICAgIFwiI3ByYWdtYVwiLFxuICAgIFwiI2NvZGVnZW4yXCIsXG4gICAgXCIjY29kZWdlbjNcIlxuICBdLFxuICBpcnJlZ3VsYXJfa2V5d29yZF9saXN0OiBbXG4gICAgXCJ2YWwrXCIsXG4gICAgXCJ2YWwtXCIsXG4gICAgXCJ2YWxcIixcbiAgICBcImNhc2UrXCIsXG4gICAgXCJjYXNlLVwiLFxuICAgIFwiY2FzZVwiLFxuICAgIFwiYWRkckBcIixcbiAgICBcImFkZHJcIixcbiAgICBcImZvbGRAXCIsXG4gICAgXCJmcmVlQFwiLFxuICAgIFwiZml4QFwiLFxuICAgIFwiZml4XCIsXG4gICAgXCJsYW1AXCIsXG4gICAgXCJsYW1cIixcbiAgICBcImxsYW1AXCIsXG4gICAgXCJsbGFtXCIsXG4gICAgXCJ2aWV3dEB5cGUrXCIsXG4gICAgXCJ2aWV3dEB5cGUtXCIsXG4gICAgXCJ2aWV3dEB5cGVcIixcbiAgICBcInZpZXd0eXBlK1wiLFxuICAgIFwidmlld3R5cGUtXCIsXG4gICAgXCJ2aWV3dHlwZVwiLFxuICAgIFwidmlldytcIixcbiAgICBcInZpZXctXCIsXG4gICAgXCJ2aWV3QFwiLFxuICAgIFwidmlld1wiLFxuICAgIFwidHlwZStcIixcbiAgICBcInR5cGUtXCIsXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJ2dHlwZStcIixcbiAgICBcInZ0eXBlLVwiLFxuICAgIFwidnR5cGVcIixcbiAgICBcInZ0QHlwZStcIixcbiAgICBcInZ0QHlwZS1cIixcbiAgICBcInZ0QHlwZVwiLFxuICAgIFwidmlld3RAeXBlK1wiLFxuICAgIFwidmlld3RAeXBlLVwiLFxuICAgIFwidmlld3RAeXBlXCIsXG4gICAgXCJ2aWV3dHlwZStcIixcbiAgICBcInZpZXd0eXBlLVwiLFxuICAgIFwidmlld3R5cGVcIixcbiAgICBcInByb3ArXCIsXG4gICAgXCJwcm9wLVwiLFxuICAgIFwicHJvcFwiLFxuICAgIFwidHlwZStcIixcbiAgICBcInR5cGUtXCIsXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJ0QHlwZVwiLFxuICAgIFwidEB5cGUrXCIsXG4gICAgXCJ0QHlwZS1cIixcbiAgICBcImFic3RAeXBlXCIsXG4gICAgXCJhYnN0eXBlXCIsXG4gICAgXCJhYnN2aWV3dEB5cGVcIixcbiAgICBcImFic3Z0QHlwZVwiLFxuICAgIFwiZm9yKlwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJ3aGlsZSpcIixcbiAgICBcIndoaWxlXCJcbiAgXSxcbiAga2V5d29yZHNfdHlwZXM6IFtcbiAgICBcImJvb2xcIixcbiAgICBcImRvdWJsZVwiLFxuICAgIFwiYnl0ZVwiLFxuICAgIFwiaW50XCIsXG4gICAgXCJzaG9ydFwiLFxuICAgIFwiY2hhclwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwidW5pdFwiLFxuICAgIFwibG9uZ1wiLFxuICAgIFwiZmxvYXRcIixcbiAgICBcInN0cmluZ1wiLFxuICAgIFwic3RycHRyXCJcbiAgXSxcbiAga2V5d29yZHNfZWZmZWN0czogW1xuICAgIFwiMFwiLFxuICAgIFwiZnVuXCIsXG4gICAgXCJjbG9cIixcbiAgICBcInByZlwiLFxuICAgIFwiZnVuY2xvXCIsXG4gICAgXCJjbG9wdHJcIixcbiAgICBcImNsb3JlZlwiLFxuICAgIFwicmVmXCIsXG4gICAgXCJudG1cIixcbiAgICBcIjFcIlxuICBdLFxuICBvcGVyYXRvcnM6IFtcbiAgICBcIkBcIixcbiAgICBcIiFcIixcbiAgICBcInxcIixcbiAgICBcImBcIixcbiAgICBcIjpcIixcbiAgICBcIiRcIixcbiAgICBcIi5cIixcbiAgICBcIj1cIixcbiAgICBcIiNcIixcbiAgICBcIn5cIixcbiAgICBcIi4uXCIsXG4gICAgXCIuLi5cIixcbiAgICBcIj0+XCIsXG4gICAgXCI9PD5cIixcbiAgICBcIj0vPT5cIixcbiAgICBcIj0+PlwiLFxuICAgIFwiPS89Pj5cIixcbiAgICBcIjxcIixcbiAgICBcIj5cIixcbiAgICBcIj48XCIsXG4gICAgXCIuPFwiLFxuICAgIFwiPi5cIixcbiAgICBcIi48Pi5cIixcbiAgICBcIi0+XCIsXG4gICAgXCItPD5cIlxuICBdLFxuICBicmFja2V0czogW1xuICAgIHsgb3BlbjogXCIsKFwiLCBjbG9zZTogXCIpXCIsIHRva2VuOiBcImRlbGltaXRlci5wYXJlbnRoZXNpc1wiIH0sXG4gICAgeyBvcGVuOiBcImAoXCIsIGNsb3NlOiBcIilcIiwgdG9rZW46IFwiZGVsaW1pdGVyLnBhcmVudGhlc2lzXCIgfSxcbiAgICB7IG9wZW46IFwiJShcIiwgY2xvc2U6IFwiKVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIucGFyZW50aGVzaXNcIiB9LFxuICAgIHsgb3BlbjogXCInKFwiLCBjbG9zZTogXCIpXCIsIHRva2VuOiBcImRlbGltaXRlci5wYXJlbnRoZXNpc1wiIH0sXG4gICAgeyBvcGVuOiBcIid7XCIsIGNsb3NlOiBcIn1cIiwgdG9rZW46IFwiZGVsaW1pdGVyLnBhcmVudGhlc2lzXCIgfSxcbiAgICB7IG9wZW46IFwiQChcIiwgY2xvc2U6IFwiKVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIucGFyZW50aGVzaXNcIiB9LFxuICAgIHsgb3BlbjogXCJAe1wiLCBjbG9zZTogXCJ9XCIsIHRva2VuOiBcImRlbGltaXRlci5icmFjZVwiIH0sXG4gICAgeyBvcGVuOiBcIkBbXCIsIGNsb3NlOiBcIl1cIiwgdG9rZW46IFwiZGVsaW1pdGVyLnNxdWFyZVwiIH0sXG4gICAgeyBvcGVuOiBcIiNbXCIsIGNsb3NlOiBcIl1cIiwgdG9rZW46IFwiZGVsaW1pdGVyLnNxdWFyZVwiIH0sXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIuY3VybHlcIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiwgdG9rZW46IFwiZGVsaW1pdGVyLnNxdWFyZVwiIH0sXG4gICAgeyBvcGVuOiBcIihcIiwgY2xvc2U6IFwiKVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIucGFyZW50aGVzaXNcIiB9LFxuICAgIHsgb3BlbjogXCI8XCIsIGNsb3NlOiBcIj5cIiwgdG9rZW46IFwiZGVsaW1pdGVyLmFuZ2xlXCIgfVxuICBdLFxuICBzeW1ib2xzOiAvWz0+PCF+PzomfCtcXC0qXFwvXFxeJV0rLyxcbiAgSURFTlRGU1Q6IC9bYS16QS1aX10vLFxuICBJREVOVFJTVDogL1thLXpBLVowLTlfJyRdLyxcbiAgc3ltYm9saWM6IC9bJSYrLS4vOj1AfmBefCohJCM/PD5dLyxcbiAgZGlnaXQ6IC9bMC05XS8sXG4gIGRpZ2l0c2VxMDogL0BkaWdpdCovLFxuICB4ZGlnaXQ6IC9bMC05QS1aYS16XS8sXG4gIHhkaWdpdHNlcTA6IC9AeGRpZ2l0Ki8sXG4gIElOVFNQOiAvW2xMdVVdLyxcbiAgRkxPQVRTUDogL1tmRmxMXS8sXG4gIGZleHBvbmVudDogL1tlRV1bKy1dP1swLTldKy8sXG4gIGZleHBvbmVudF9iaW46IC9bcFBdWystXT9bMC05XSsvLFxuICBkZWNpZXhwOiAvXFwuWzAtOV0qQGZleHBvbmVudD8vLFxuICBoZXhpZXhwOiAvXFwuWzAtOWEtekEtWl0qQGZleHBvbmVudF9iaW4/LyxcbiAgaXJyZWd1bGFyX2tleXdvcmRzOiAvdmFsWystXT98Y2FzZVsrLV0/fGFkZHJcXEA/fGZvbGRcXEB8ZnJlZVxcQHxmaXhcXEA/fGxhbVxcQD98bGxhbVxcQD98cHJvcFsrLV0/fHR5cGVbKy1dP3x2aWV3WystQF0/fHZpZXd0QD95cGVbKy1dP3x0QD95cGVbKy1dP3x2KGlldyk/dEA/eXBlWystXT98YWJzdEA/eXBlfGFic3YoaWV3KT90QD95cGV8Zm9yXFwqP3x3aGlsZVxcKj8vLFxuICBFU0NIQVI6IC9bbnR2YnJmYVxcXFxcXD8nXCJcXChcXFtcXHtdLyxcbiAgc3RhcnQ6IFwicm9vdFwiLFxuICB0b2tlbml6ZXI6IHtcbiAgICByb290OiBbXG4gICAgICB7IHJlZ2V4OiAvWyBcXHRcXHJcXG5dKy8sIGFjdGlvbjogeyB0b2tlbjogXCJcIiB9IH0sXG4gICAgICB7IHJlZ2V4OiAvXFwoXFwqXFwpLywgYWN0aW9uOiB7IHRva2VuOiBcImludmFsaWRcIiB9IH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXFwoXFwqLyxcbiAgICAgICAgYWN0aW9uOiB7IHRva2VuOiBcImNvbW1lbnRcIiwgbmV4dDogXCJsZXhpbmdfQ09NTUVOVF9ibG9ja19tbFwiIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXFwoLyxcbiAgICAgICAgYWN0aW9uOiBcIkBicmFja2V0c1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZWdleDogL1xcKS8sXG4gICAgICAgIGFjdGlvbjogXCJAYnJhY2tldHNcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9cXFsvLFxuICAgICAgICBhY3Rpb246IFwiQGJyYWNrZXRzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXFxdLyxcbiAgICAgICAgYWN0aW9uOiBcIkBicmFja2V0c1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZWdleDogL1xcey8sXG4gICAgICAgIGFjdGlvbjogXCJAYnJhY2tldHNcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9cXH0vLFxuICAgICAgICBhY3Rpb246IFwiQGJyYWNrZXRzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvLFxcKC8sXG4gICAgICAgIGFjdGlvbjogXCJAYnJhY2tldHNcIlxuICAgICAgfSxcbiAgICAgIHsgcmVnZXg6IC8sLywgYWN0aW9uOiB7IHRva2VuOiBcImRlbGltaXRlci5jb21tYVwiIH0gfSxcbiAgICAgIHsgcmVnZXg6IC87LywgYWN0aW9uOiB7IHRva2VuOiBcImRlbGltaXRlci5zZW1pY29sb25cIiB9IH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvQFxcKC8sXG4gICAgICAgIGFjdGlvbjogXCJAYnJhY2tldHNcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9AXFxbLyxcbiAgICAgICAgYWN0aW9uOiBcIkBicmFja2V0c1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZWdleDogL0BcXHsvLFxuICAgICAgICBhY3Rpb246IFwiQGJyYWNrZXRzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvOjwvLFxuICAgICAgICBhY3Rpb246IHsgdG9rZW46IFwia2V5d29yZFwiLCBuZXh0OiBcIkBsZXhpbmdfRUZGRUNUX2NvbW1hc2VxMFwiIH1cbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvXFwuQHN5bWJvbGljKy8sIGFjdGlvbjogeyB0b2tlbjogXCJpZGVudGlmaWVyLnN5bVwiIH0gfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9cXC5AZGlnaXQqQGZleHBvbmVudEBGTE9BVFNQKi8sXG4gICAgICAgIGFjdGlvbjogeyB0b2tlbjogXCJudW1iZXIuZmxvYXRcIiB9XG4gICAgICB9LFxuICAgICAgeyByZWdleDogL1xcLkBkaWdpdCsvLCBhY3Rpb246IHsgdG9rZW46IFwibnVtYmVyLmZsb2F0XCIgfSB9LFxuICAgICAge1xuICAgICAgICByZWdleDogL1xcJEBJREVOVEZTVEBJREVOVFJTVCovLFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAa2V5d29yZHNfZGxyXCI6IHsgdG9rZW46IFwia2V5d29yZC5kbHJcIiB9LFxuICAgICAgICAgICAgXCJAZGVmYXVsdFwiOiB7IHRva2VuOiBcIm5hbWVzcGFjZVwiIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXFwjQElERU5URlNUQElERU5UUlNUKi8sXG4gICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBrZXl3b3Jkc19zcnBcIjogeyB0b2tlbjogXCJrZXl3b3JkLnNycFwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IHsgdG9rZW46IFwiaWRlbnRpZmllclwiIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvJVxcKC8sIGFjdGlvbjogeyB0b2tlbjogXCJkZWxpbWl0ZXIucGFyZW50aGVzaXNcIiB9IH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXiV7KCN8XFxefFxcJCk/LyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgdG9rZW46IFwia2V5d29yZFwiLFxuICAgICAgICAgIG5leHQ6IFwiQGxleGluZ19FWFRDT0RFXCIsXG4gICAgICAgICAgbmV4dEVtYmVkZGVkOiBcInRleHQvamF2YXNjcmlwdFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvXiV9LywgYWN0aW9uOiB7IHRva2VuOiBcImtleXdvcmRcIiB9IH0sXG4gICAgICB7IHJlZ2V4OiAvJ1xcKC8sIGFjdGlvbjogeyB0b2tlbjogXCJkZWxpbWl0ZXIucGFyZW50aGVzaXNcIiB9IH0sXG4gICAgICB7IHJlZ2V4OiAvJ1xcWy8sIGFjdGlvbjogeyB0b2tlbjogXCJkZWxpbWl0ZXIuYnJhY2tldFwiIH0gfSxcbiAgICAgIHsgcmVnZXg6IC8nXFx7LywgYWN0aW9uOiB7IHRva2VuOiBcImRlbGltaXRlci5icmFjZVwiIH0gfSxcbiAgICAgIFsvKCcpKFxcXFxARVNDSEFSfFxcXFxbeFhdQHhkaWdpdCt8XFxcXEBkaWdpdCspKCcpLywgW1wic3RyaW5nXCIsIFwic3RyaW5nLmVzY2FwZVwiLCBcInN0cmluZ1wiXV0sXG4gICAgICBbLydbXlxcXFwnXScvLCBcInN0cmluZ1wiXSxcbiAgICAgIFsvXCIvLCBcInN0cmluZy5xdW90ZVwiLCBcIkBsZXhpbmdfRFFVT1RFXCJdLFxuICAgICAge1xuICAgICAgICByZWdleDogL2BcXCgvLFxuICAgICAgICBhY3Rpb246IFwiQGJyYWNrZXRzXCJcbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvXFxcXC8sIGFjdGlvbjogeyB0b2tlbjogXCJwdW5jdHVhdGlvblwiIH0gfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9AaXJyZWd1bGFyX2tleXdvcmRzKD8hQElERU5UUlNUKS8sXG4gICAgICAgIGFjdGlvbjogeyB0b2tlbjogXCJrZXl3b3JkXCIgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9ASURFTlRGU1RASURFTlRSU1QqWzwhXFxbXT8vLFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAa2V5d29yZHNcIjogeyB0b2tlbjogXCJrZXl3b3JkXCIgfSxcbiAgICAgICAgICAgIFwiQGtleXdvcmRzX3R5cGVzXCI6IHsgdG9rZW46IFwidHlwZVwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IHsgdG9rZW46IFwiaWRlbnRpZmllclwiIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXFwvXFwvXFwvXFwvLyxcbiAgICAgICAgYWN0aW9uOiB7IHRva2VuOiBcImNvbW1lbnRcIiwgbmV4dDogXCJAbGV4aW5nX0NPTU1FTlRfcmVzdFwiIH1cbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvXFwvXFwvLiokLywgYWN0aW9uOiB7IHRva2VuOiBcImNvbW1lbnRcIiB9IH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvXFwvXFwqLyxcbiAgICAgICAgYWN0aW9uOiB7IHRva2VuOiBcImNvbW1lbnRcIiwgbmV4dDogXCJAbGV4aW5nX0NPTU1FTlRfYmxvY2tfY1wiIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvLTx8PTwvLFxuICAgICAgICBhY3Rpb246IHsgdG9rZW46IFwia2V5d29yZFwiLCBuZXh0OiBcIkBsZXhpbmdfRUZGRUNUX2NvbW1hc2VxMFwiIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvQHN5bWJvbGljKy8sXG4gICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBvcGVyYXRvcnNcIjogXCJrZXl3b3JkXCIsXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwib3BlcmF0b3JcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC8wW3hYXUB4ZGlnaXQrKEBoZXhpZXhwfEBmZXhwb25lbnRfYmluKUBGTE9BVFNQKi8sXG4gICAgICAgIGFjdGlvbjogeyB0b2tlbjogXCJudW1iZXIuZmxvYXRcIiB9XG4gICAgICB9LFxuICAgICAgeyByZWdleDogLzBbeFhdQHhkaWdpdCtASU5UU1AqLywgYWN0aW9uOiB7IHRva2VuOiBcIm51bWJlci5oZXhcIiB9IH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvMFswLTddKyg/IVswLTldKUBJTlRTUCovLFxuICAgICAgICBhY3Rpb246IHsgdG9rZW46IFwibnVtYmVyLm9jdGFsXCIgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9AZGlnaXQrKEBmZXhwb25lbnR8QGRlY2lleHApQEZMT0FUU1AqLyxcbiAgICAgICAgYWN0aW9uOiB7IHRva2VuOiBcIm51bWJlci5mbG9hdFwiIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvQGRpZ2l0QGRpZ2l0c2VxMEBJTlRTUCovLFxuICAgICAgICBhY3Rpb246IHsgdG9rZW46IFwibnVtYmVyLmRlY2ltYWxcIiB9XG4gICAgICB9LFxuICAgICAgeyByZWdleDogL0BkaWdpdCtASU5UU1AqLywgYWN0aW9uOiB7IHRva2VuOiBcIm51bWJlclwiIH0gfVxuICAgIF0sXG4gICAgbGV4aW5nX0NPTU1FTlRfYmxvY2tfbWw6IFtcbiAgICAgIFsvW15cXChcXCpdKy8sIFwiY29tbWVudFwiXSxcbiAgICAgIFsvXFwoXFwqLywgXCJjb21tZW50XCIsIFwiQHB1c2hcIl0sXG4gICAgICBbL1xcKFxcKi8sIFwiY29tbWVudC5pbnZhbGlkXCJdLFxuICAgICAgWy9cXCpcXCkvLCBcImNvbW1lbnRcIiwgXCJAcG9wXCJdLFxuICAgICAgWy9cXCovLCBcImNvbW1lbnRcIl1cbiAgICBdLFxuICAgIGxleGluZ19DT01NRU5UX2Jsb2NrX2M6IFtcbiAgICAgIFsvW15cXC8qXSsvLCBcImNvbW1lbnRcIl0sXG4gICAgICBbL1xcKlxcLy8sIFwiY29tbWVudFwiLCBcIkBwb3BcIl0sXG4gICAgICBbL1tcXC8qXS8sIFwiY29tbWVudFwiXVxuICAgIF0sXG4gICAgbGV4aW5nX0NPTU1FTlRfcmVzdDogW1xuICAgICAgWy8kLywgXCJjb21tZW50XCIsIFwiQHBvcFwiXSxcbiAgICAgIFsvLiovLCBcImNvbW1lbnRcIl1cbiAgICBdLFxuICAgIGxleGluZ19FRkZFQ1RfY29tbWFzZXEwOiBbXG4gICAgICB7XG4gICAgICAgIHJlZ2V4OiAvQElERU5URlNUQElERU5UUlNUK3xAZGlnaXQrLyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQGtleXdvcmRzX2VmZmVjdHNcIjogeyB0b2tlbjogXCJ0eXBlLmVmZmVjdFwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IHsgdG9rZW46IFwiaWRlbnRpZmllclwiIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvLC8sIGFjdGlvbjogeyB0b2tlbjogXCJwdW5jdHVhdGlvblwiIH0gfSxcbiAgICAgIHsgcmVnZXg6IC8+LywgYWN0aW9uOiB7IHRva2VuOiBcIkByZW1hdGNoXCIsIG5leHQ6IFwiQHBvcFwiIH0gfVxuICAgIF0sXG4gICAgbGV4aW5nX0VYVENPREU6IFtcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9eJX0vLFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICB0b2tlbjogXCJAcmVtYXRjaFwiLFxuICAgICAgICAgIG5leHQ6IFwiQHBvcFwiLFxuICAgICAgICAgIG5leHRFbWJlZGRlZDogXCJAcG9wXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHsgcmVnZXg6IC9bXiVdKy8sIGFjdGlvbjogXCJcIiB9XG4gICAgXSxcbiAgICBsZXhpbmdfRFFVT1RFOiBbXG4gICAgICB7IHJlZ2V4OiAvXCIvLCBhY3Rpb246IHsgdG9rZW46IFwic3RyaW5nLnF1b3RlXCIsIG5leHQ6IFwiQHBvcFwiIH0gfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC8oXFx7XFwkKShASURFTlRGU1RASURFTlRSU1QqKShcXH0pLyxcbiAgICAgICAgYWN0aW9uOiBbeyB0b2tlbjogXCJzdHJpbmcuZXNjYXBlXCIgfSwgeyB0b2tlbjogXCJpZGVudGlmaWVyXCIgfSwgeyB0b2tlbjogXCJzdHJpbmcuZXNjYXBlXCIgfV1cbiAgICAgIH0sXG4gICAgICB7IHJlZ2V4OiAvXFxcXCQvLCBhY3Rpb246IHsgdG9rZW46IFwic3RyaW5nLmVzY2FwZVwiIH0gfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9cXFxcKEBFU0NIQVJ8W3hYXUB4ZGlnaXQrfEBkaWdpdCspLyxcbiAgICAgICAgYWN0aW9uOiB7IHRva2VuOiBcInN0cmluZy5lc2NhcGVcIiB9XG4gICAgICB9LFxuICAgICAgeyByZWdleDogL1teXFxcXFwiXSsvLCBhY3Rpb246IHsgdG9rZW46IFwic3RyaW5nXCIgfSB9XG4gICAgXVxuICB9XG59O1xuZXhwb3J0IHtcbiAgY29uZixcbiAgbGFuZ3VhZ2Vcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js\n");

/***/ })

}]);